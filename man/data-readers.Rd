% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/read_format.R
\name{data-readers}
\alias{data-readers}
\alias{read_format_v2}
\alias{read_format_v2_update}
\alias{read_format_v3_old}
\alias{read_format_v3}
\alias{read_format_v4}
\title{Read Data Formats for Pneumatron}
\usage{
read_format_v2(file_path)

read_format_v2_update(file_path)

read_format_v3_old(file_path)

read_format_v3(file_path)

read_format_v4(file_path)
}
\arguments{
\item{file_path}{The path to the CSV file to be read.}
}
\value{
A data.table containing the processed data.
}
\description{
This collection of functions provides various methods for reading and processing
data from different versions of the Pneumatron data formats, each equipped with specific hardware configurations.
These functions support CSV file inputs and utilize the data.table package for data manipulation.
}
\details{
\itemize{
\item \code{read_format_v2}: Processes data from the grey Pneumatron equipped with an Arduino and a relative pressure sensor with ADS. It also has other environmental sensors.
\item \code{read_format_v2_update}: Reads an updated version of format V2 focusing on essential data columns such as pressure, id, measure, and log_line.
\item \code{read_format_v3_old}: Manages data from the white Pneumatron using an older COM-port reading script with an ESP8266.
\item \code{read_format_v3}: Handles data from the white Pneumatron format V3 with an ESP8266 and enviromental sensors, implementing cleaning methods for corrupted files.
\item \code{read_format_v4}: Designed for the newest Pneumatron format V4 with an ESP8266 and an absolute pressure sensor, also includes methods for cleaning corrupted files.
}

Each function adapts to the specifics of the data format version it is designed to read, handling key data fields,
converting data types, and applying specific data cleaning procedures as necessary.
}
\examples{
data <- read_format_v4("path/to/your/data.csv")
}
